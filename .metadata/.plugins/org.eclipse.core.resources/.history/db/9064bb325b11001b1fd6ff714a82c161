package alex.lopez.ve.tbm.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;

import alex.lopez.ve.tbm.interfaces.Initialisable;

public class TBMMenuBar extends JMenuBar implements Initialisable {

	private static final long serialVersionUID = 6527668553010898685L;

	@FunctionalInterface
	private interface Callback {
		void execute();
	}

	public TBMMenuBar() {
		initialise();
	}

	@Override
	public void initialise() {
		JMenu menu = new JMenu("File");

		JMenuItem loadRecipientsMI = createMenuItem("Load recipients file...", () -> {
			loadRecipients();
		});
		JMenuItem loadTemplateMI = createMenuItem("Load template file...", () -> {
			loadTemplate();
		});
		JMenuItem exitMI = createMenuItem("Exit", () -> {
			exit();
		});

		menu.add(loadRecipientsMI);
		menu.add(loadTemplateMI);
		menu.add(new JSeparator(JSeparator.HORIZONTAL));
		menu.add(exitMI);

		add(menu);
	}

	private JMenuItem createMenuItem(String name, Callback callback) {
		JMenuItem menuItem = new JMenuItem(name);

		menuItem.addActionListener((ActionEvent ae) -> {
			if (ae.getSource() == menuItem) {
				callback.execute();
			}
		});

		return menuItem;
	}

	private void loadTemplate() {
		System.out.println("Loading template file!");
	}

	private void loadRecipients() {
		System.out.println("Loading recipients file!");
	}

	private void exit() {
		System.out.println("Exiting!");
	}

}
